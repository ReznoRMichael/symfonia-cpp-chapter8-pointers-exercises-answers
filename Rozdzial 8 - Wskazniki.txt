I. Do wskaźnika wsk zapisano adres w pamięci początku obiektu obj.

II. Przypisywanie wartości do obiektu pokazywanego wskaźnikiem. (program)

III. unsigned long * a, b;
*a - a jest wskaźnikiem pokazującym na obiekt typu unsigned long
b - jest obiektem typu unsigned long

IV. Które mogą być pokazywane wskaźnikami:
a) zwykły obiekt - może
b) tablica obiektów - może
c) wskaźnik - może
d) referencja - nie może (przezwisko, nie jest obiektem)
e) nazwa - nie może (nazwa nie jest obiektem)
f) funkcja - może (nazwa funkcji to także jej adres)
g) komórka pamięci komputera - może
h) bit w komórce pamięci - nie może

V. Wskaźnik typu char nie nadaje się do pokazywania na obiekt typu double.

VI. Wyrażenie jest l-wartością (l-value) gdy może występować również po lewej stronie znaku = (nie tylko po prawej).

VII. L-value jest równocześnie R-value. Ale nie odwrotnie.

VIII. Które to l-value?
wsk - l-value
*wsk - l-value
&wsk - r-value

IX. Zdefiniuj (program)

X. Ustaw wskaźnik na adres (program)

XI. Read the value from the pointer (program from X)

XII. Wskaźnik typu void* może być ustawiony na dowolny typ, bez specyfikowania dokładnie, nawet jeśli go nie znamy.

XIII. Ustaw wskaźnik void* na obiekt (program)

XIV. Ustaw wskaźnik na tablicę znaków + wypisywanie na ekran (program)

XV. Przesunięcie wskaźnika o X elementów dalej można wykonać prostą instrukcją wskaznik+X. Można w ten sposób przesunąć wskaźnik nawet o większą ilość elementów niż zawiera tablica (niebezpieczne).

XVI. Kompilator nie sprawdza poprawności przesuwania wskaźników na nieistniejące elementy tablic. Taki błąd może się objawić nawet dopiero wtedy, kiedy zaczniemy korzystać z danych, które siedzą w tym konkretnym miejscu w pamięci.

XVII. Instrukcje przesuwające oba wskaźniki o 4 elementy tablicy dalej. (program)

XVIII. Uzyskiwanie adresu początku tablicy - można tak zrobić za pomocą ustawienia wskaźnika na początek tablicy, i odczytanie jego adresu za pomocą &wskT.

XIX. Nazwa tablicy od wskaźnika ustawionego na jej zerowy element, różnice:
- nazwa tablicy to stały wskaźnik do jej zerowego obiektu - nie można go zmienić
- wskaźnik jest obiektem - dlatego da się ustalić jego adres. Nazwa tablicy nie jest obiektem, więc nie można ustalić jej adresu.

XX. odejmowanie wskaźników (program)
wskB - wskA = 30
wskA - wskB = -30

XXI. dwa wskaźniki ustawione na tą samą tablicę:
a) dodawanie - tak
b) dodawanie liczby całkowitej do wskaźnika - tak
c) odejmowanie - tak
d) odejmowanie liczby całkowitej od wskaźnika - tak
e) mnożenie - nie
f) mnożenie wskaźnika przez liczbę całkowitą - nie
g) dzielenie - nie
h) dzielenie wskaźnika przez liczbę całkowitą - nie

XXII. dwa wskaźniki ustawione na tą samą tablicę:
== - porównywanie wskaźników (oba pokazują na to samo/ten sam obiekt)
!= - oba wskaźniki pokazują na różne obiekty
< - wskaźnik pokazuje na element tablicy o mniejszym indeksie
> - wskaźnik pokazuje na element tablicy o większym indeksie
<= - wskaźnik pokazuje na element tablicy o mniejszym lub tym samym indeksie
>= - wskaźnik pokazuje na element tablicy o większym lub tym samym indeksie

XXIII. Wskaźniki pokazujące na zupełnie różne obiekty. Wykonując na nich operacji porównania, dowiadujemy się w ten sposób, jak w pamięci komputera ulokowane są względem siebie te obiekty.

XXIV. Niezainicjowane wskaźniki pokazują na:
a) wskaźnik będący lokalnym obiektem automatycznym - śmieci
b) wskaźnik będący lokalnym obiektem statycznym - adres zero/null/0
c) wskaźnik będącym obiektem globalnym - adres zero/null/0
d) wskaźnik z przestrzeni nazw (namespace) - ?

XXV. Cel Ustawiania wskaźnika na adres 0 - często służy nam by zaznaczyć, że wskaźnik nie pokazuje na nic sensownego.

XXVI. Najkrótsze sprawdzenie if-em czy wskaźnik jest ustawiony na adres zerowy: if(!wsk);

XXVII. Najkrótsze sprawdzenie if-em czy wskaźnik jest ustawiony na adres inny niż zerowy: if(wsk);

XXVIII. if(wsk != NULL) - sprawdzenie, czy wskaźnik jest ustawiony na coś innego niż adres zerowy. Inaczej if(wsk);

XXIX. Funkcja zerowanie (program)

XXX. Funkcja dodająca 44 do każdego elementu tablicy (program) (3 versions - array, pointer and pointer-array)

XXXI. Funkcja pokazująca na ekranie zawartość tablicy stałych typu double. (program)

XXXII. Tworzenie operatorem new obiektu typu wbudowanego (takiego w który język jest standardowo wyposażony) bez inicjalizacji wartością:
Zawiera wstępnie śmieci. Pod tym względem bardziej przypomina obiekt automatyczny (gdyż obiekty globalne wstępnie inicjalizowane są zerami).

XXXIII. Tworzenie operatorem new elementów 3 tablic + funkcja wykonująca operację mnożenia i wstawiania do tablic (program).

XXXIV. Modyfikacja programu z ćw. 33 - funkcja kreator_tablicy() - tworzenie dynamiczne tablicy. (program)

XXXV. Jaka różnica:
int *wsk1 = new int[10]; -> tworzenie nowej tablicy 10 obiektów int
int *wsk2 = new int(10); -> tworzenie nowego obiektu int oraz zainicjalizowanie go wartością 10

XXXVI. Operatory new oraz new[] to dwa odrębne operatory.
Instrukcje kasujące dla tych operatorów wyglądają następująco: 
delete
oraz
delete[]

XXXVII. Umiejscawiający operator new (dla zaawansowanych) - go back later

XXXVIII. Obiekt stworzony przy pomocy instrukcji 'new':
double *wsk = new double;
Nie ma nazwy. Ale można się odnieść do jego adresu przy pomocy wskaźnika wsk.

XXXIX. 3 sposoby powiadamiania o niemożliwości stworzenia nowego obiektu na skutek wyczerpania pamięci:
1. zwrot adresu zero - sposób "dawny"
2. rzucenie wyjątku 'bad_alloc' - sposób "nowoczesny" (try...catch) std::bad_alloc
3. wywołanie jakiejś naszej funkcji

XL. Różnica między wskaźnikiem stałym, a wskaźnikiem do obiektu stałego: 
Wskaźnik stały - nieruchomy, zamrożony, ustawia się go raz, nie można go już zmienić (int *const wsk = &obiekt)
Wskaźnik do obiektu stałego - wskaźnik, który traktuje pokazywany obiekt jako coś, czego nie można zmieniać (traktuje go jak obiekt stały)

XLI. Czy może istnieć wskaźnik stały do obiektu stałego? Może. Np. const double *const p 

XLII. Do wskaźnika stałego można wpisać adres wyłącznie w momencie inicjalizacji. Później nie jest to możliwe.

XLIII. Które z instrukcji kompilator odrzuci i dlaczego?
int *const wa = new int;
const int *wb = new int(8);
int m = 4;

a) wa = 10; error: assignment of read-only variable 'wa' / error: invalid conversion from 'int' to 'int*' [-fpermissive] (nie można zmieniać adresu stałego wskaźnika + nie użyto reinterpret_cast)
b) wb = 10; error: invalid conversion from 'int' to 'const int*' [-fpermissive] (nie użyto reinterpret_cast)
c) *wa = 10; // przypisz wartość adresowi wskaźnika (wartość stałego wskaźnika można przypisać po inicjalizacji, nie można tylko zmieniać adresu)
d) *wb = 10; error: assignment of read-only location '* wb' (to jest obiekt stały, więc nie można przypisać mu innej wartości niż początkowa 8)
e) wa = &m; error: assignment of read-only variable 'wa' (nie można zmieniać adresu stałego wskaźnika)
f) wb = &m; // można zmieniać adres normalnego wskaźnika do obiektów const
g) delete wa; // można usunąć
h) delete wb; // można usunąć

XLIV. Wyjaśnij co powodują oba fragmenty.
a) int *wsk; -> zdefiniowanie wskaźnika do obiektów int
*wsk = 0; -> przypisanie wskaźnikowi wartości 0 bez ustawiania wcześniej na adres // warning: 'wsk' is used uninitialized in this function [-Wuninitialized]
b) int *wsk = 0; -> definicja wskaźnika do obiektów int i wpisanie wartości 0 bez ustawiania na adres // warning: unused variable 'wsk' [-Wunused-variable]

XLV. const char *wsk = "Napis"; -> ustawienie wskaźnika na ciąg znaków (stałą dosłowną typu C-string). Nie jest to kopia, ale ustawienie na adres tego miejsca w pamięci, gdzie ten C-string powstał.

XLVI. Które z instrukcji komplitor odrzuci, i dlaczego? Które z przepisań można przeprowadzić dzięki operacji rzutowania, a które są niemożliwe nawet za pomocą rzutowania?
int obiekt = 100; // zwykły obiekt
int *intw; // wskaźnik do zwykłych obiektów int
const int *Cintw; // wskaźnik do stałych obiektów int
int *const intCw = &obiekt; // stały wskaźnik do obiektów int
const int *const CintCw = &obiekt; // stały wskaźnik do stałych obiektów int

a)	intw = Cintw; // error: invalid conversion from 'const int*' to 'int*' [-fpermissive] (wskaźnik do zmiennych nie może się zmienić we wskaźnik do stałych)
	intw = const_cast<int *>(Cintw); // rzutowanie jest możliwe
b) 	intw = intCw; // możliwe - wskaźnik do zmiennej może pokazywać na to samo, co stały wskaźnik
c) 	intw = CintCw; // error: invalid conversion from 'const int*' to 'int*' [-fpermissive] (wskaźnik do zmiennych nie może się zmienić we wskaźnik do stałych)
	intw = const_cast<int *>(CintCw); // rzutowanie jest możliwe
d) 	Cintw = intw; // możliwe - wskaźnik do stałej może pokazywać na to samo, co zwykły wskaźnik
e) 	Cintw = intCw; // możliwe - wskaźnik do stałej może pokazywać na to samo, co stały wskaźnik
f) 	Cintw = CintCw; // możliwe - wskaźnik do stałej może pokazywać na to samo, co stały wskaźnik do stałej
g) 	CintCw = intw; // error: assignment of read-only variable 'CintCw' (stałego wskaźnika nie można przestawiać na nic innego)
	CintCw = const_cast<const int *const>(intw); // rzutowanie nie jest możliwe (stałego wskaźnika nie można przestawiać na nic innego)
h) 	CintCw = Cintw; // error: assignment of read-only variable 'CintCw' (stałego wskaźnika nie można przestawiać na nic innego)
	CintCw = const_cast<const int *const>(Cintw); // rzutowanie nie jest możliwe (stałego wskaźnika nie można przestawiać na nic innego)
i) 	CintCw = intCw; // error: assignment of read-only variable 'CintCw' (stałego wskaźnika nie można przestawiać na nic innego)
	CintCw = const_cast<const int *const>(intCw); // rzutowanie nie jest możliwe (stałego wskaźnika nie można przestawiać na nic innego)
	
XLVII. Definicja 100-elementowej tablicy wskaźników do obiektów typu unsigned char.
unsigned char *tabwsk[100];
lub alternatywnie
unsigned char *(tabwsk[100]);

XLVIII. Funkcja rezerwująca 10-elementową tablicę i przekazująca adres wskaźnikowi. (program) - do zrobienia

IL. Deklaracja funkcji przyjmująca dwa argumenty - C-string i wskaźnik do tablicy wskaźników do obiektów typu double. Zwraca wskaźnik do typu void. (program)

L. Funkcja, która do początku treści tablicy znaków dopisze tekst "UWAGA: ". (program)

LI. Przeczytaj deklaracje (wskaźniki do funkcji):
void (*w)(void); — w jest wskaźnikiem do funkcji wywoływanej argumentem nieznanego typu oraz nie zwracającej żadnej wartości
void * (*w)(void*); — w jest wskaźnikiem do funkcji wywoływanej argumentem typu wskaźnik do nieznanego typu oraz zwracającej wskaźnik do nieznanego typu
int (*w)(int, double, char*); — w jest wskaźkiem do funkcji wywoływanej trzema argumentami: typu int, typu double oraz wskaźnikiem do obiektów typu char oraz zwracającej wartość typu int
double (*w)(int, double, char*); — w jest wskaźnikiem do funkcji wywoływanej trzema argumentami: typu int, double oraz wskaźnikiem do obiektów typu char oraz zwracającej wartość typu double

LII. Deklaracja wskaźnika, który może pokazywać na funkcję wywoływaną z argumentem typu wskaźnik do tablicy znakowej, a zwracającą rezultat typu wskaźnik void.
void * (*w)(char*);

LIII. Deklaracja funkcji, która otrzymuje dwa argumenty a zwraca rezultat typu bool. Argumenty funkcji:
1. wskaźnik do funkcji wywoływanej z dwoma argumentami typu double, zwracającej rezultat typu bool.
2. wskaźnik do funkcji wywoływanej z jednym argumentem typu double, a zwracającej rezultat typu char.
bool funkcja( bool (*w)(double, double), char (*w)(double) )